@using HomeBudget2.Models
@model HomeBudget2.ViewModels.FinancialOperationViewModel

@{
    FinancialOperation financialOperation = Model.FinancialOperation;
}

@if (financialOperation.IsExpense)
{
    <h2>Expense</h2>
}
@if (financialOperation.IsIncome)
{
    <h2>Income</h2>
}
@if (financialOperation.IsTransfer)
{
    <h2>Transfer</h2>
}
<h3>Create</h3>


@using (Html.BeginForm("Create", "FinancialOperations", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.FinancialOperation.IsExpense)
        @Html.HiddenFor(model => model.FinancialOperation.IsIncome)
        @Html.HiddenFor(model => model.FinancialOperation.IsTransfer)

        @if (!string.IsNullOrEmpty(Model.ErrorMessage))
        {
        <div class="warning-note">
            <p>@Model.ErrorMessage</p>
        </div>
        }

        <div class="form-group">
            @Html.LabelFor(model => model.FinancialOperation.AmountOfMoney, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FinancialOperation.AmountOfMoney, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FinancialOperation.AmountOfMoney, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (financialOperation.IsExpense || financialOperation.IsTransfer)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.FinancialOperation.BankAccountId, "From account", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.FinancialOperation.BankAccountId, Model.SelectListOfBankAccounts, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.FinancialOperation.BankAccountId, "", new { @class = "text-danger" })
                </div>
            </div>
        }



        @if (financialOperation.IsExpense || financialOperation.IsIncome)
        {
            <div class="form-group">
                @if (financialOperation.IsExpense)
                {
                    @Html.LabelFor(model => model.FinancialOperation.SubCategoryId, "Expense SubCategory", htmlAttributes: new { @class = "control-label col-md-2" })
                }
                else
                {
                    @Html.LabelFor(model => model.FinancialOperation.SubCategoryId, "Income SubCategory", htmlAttributes: new { @class = "control-label col-md-2" })
                }

                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.FinancialOperation.SubCategoryId, Model.SelectListOfSubCategories,"", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.FinancialOperation.SubCategoryId, "", new { @class = "text-danger" })
                </div>
            </div>
        }

        @if (financialOperation.IsIncome || financialOperation.IsTransfer)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.FinancialOperation.TargetBankAccountId, "Target account", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.FinancialOperation.TargetBankAccountId, Model.SelectListOfBankAccounts, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.FinancialOperation.TargetBankAccountId,"", new { @class = "text-danger" })
                </div>
            </div>
        }

        <div class="form-group">
            @Html.LabelFor(model => model.FinancialOperation.DateTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FinancialOperation.DateTime, new { htmlAttributes = new { @class = "form-control datepicker", @Value = @DateTime.Now.ToShortDateString()} })
                @Html.ValidationMessageFor(model => model.FinancialOperation.DateTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FinancialOperation.Note, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FinancialOperation.Note, new { htmlAttributes = new { @class = "form-control"} })
                @Html.ValidationMessageFor(model => model.FinancialOperation.Note, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @if (Model.FinancialOperation.IsExpense)
    {
        @Html.ActionLink("Back to List", "ExpensesIndex")
    }
    @if (Model.FinancialOperation.IsIncome)
    {
        @Html.ActionLink("Back to List", "IncomesIndex")
    }
    @if (Model.FinancialOperation.IsTransfer)
    {
        @Html.ActionLink("Back to List", "TransfersIndex")
    }
</div>

@section Scripts {
    @*@Scripts.Render("~/bundles/jqueryval")*@
    <script>
        $(document).ready(function () {
            if (@Model.ErrorMessage) {
            alert(@Model.ErrorMessage)
            }
            })

    </script>
}


