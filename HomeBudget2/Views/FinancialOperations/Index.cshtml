@using HomeBudget2.Models
@model HomeBudget2.ViewModels.FinancialOperationViewModel
@using System.Web.UI.WebControls


<link href="~/Content/jsTree/themes/default/style.min.css" rel="stylesheet" />

@{
    FinancialOperation financialOp = Model.FinancialOperation;
}

@if (financialOp.IsExpense)
{
    <h2>Expenses</h2>
}
@if (financialOp.IsIncome)
{
    <h2>Incomes</h2>

}
@if (financialOp.IsTransfer)
{
    <h2>Transfers</h2>
}
<hr />
<div class="category-container">

    <div class="category-inside category-inside1">
        @using (Html.BeginForm("Create", "FinancialOperations", FormMethod.Post))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => financialOp.IsExpense)
                @Html.HiddenFor(model => financialOp.IsIncome)
                @Html.HiddenFor(model => financialOp.IsTransfer)

                <div class="form-group  label-category">
                    @Html.LabelFor(model => financialOp.AmountOfMoney, "Amount of Money", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => financialOp.AmountOfMoney, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => financialOp.AmountOfMoney, "", new { @class = "text-danger" })
                    </div>
                </div>

                @if (financialOp.IsExpense || financialOp.IsTransfer)
                {
                    <div class="form-group label-category">
                        @Html.LabelFor(model => financialOp.BankAccountId, "From account", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => financialOp.BankAccountId, Model.SelectListOfBankAccounts, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => financialOp.BankAccountId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }


                @if (financialOp.IsExpense || financialOp.IsIncome)
                {
                    <div class="form-group label-category">
                        @if (financialOp.IsExpense)
                        {
                            @Html.LabelFor(model => financialOp.SubCategoryId, "Expense SubCategory", htmlAttributes: new { @class = "control-label col-md-2" })
                        }
                        else
                        {
                            @Html.LabelFor(model => financialOp.SubCategoryId, "Income SubCategory", htmlAttributes: new { @class = "control-label col-md-2" })
                        }

                        <div class="col-md-10">
                            @Html.DropDownListFor(model => financialOp.SubCategoryId, Model.SelectListOfSubCategories, htmlAttributes: new { @class = "form-control subcategory-holder" })
                            @Html.ValidationMessageFor(model => financialOp.SubCategoryId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }

                @if (financialOp.IsIncome || financialOp.IsTransfer)
                {
                    <div class="form-group label-category">
                        @Html.LabelFor(model => financialOp.TargetBankAccountId, "Target account", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => financialOp.TargetBankAccountId, Model.SelectListOfBankAccounts, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => financialOp.TargetBankAccountId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }

                <div class="form-group label-category">
                    @Html.LabelFor(model => financialOp.DateTime, "Date", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => financialOp.DateTime, new { htmlAttributes = new { @class = "form-control datepicker ", @Value = @DateTime.Now.ToShortDateString() } })
                        @Html.ValidationMessageFor(model => financialOp.DateTime, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group label-category">
                    @Html.LabelFor(model => financialOp.Note, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => financialOp.Note, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => financialOp.Note, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group label-category">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }
    </div>
    @if (!financialOp.IsTransfer)
    {
        <div class="category-inside category-inside2">

            <div class="form-body">
                <div id="jstree">

                    @(Html.TreeView(Model.ListOfCategories)
                                                        .EmptyContent(financialOp.IsExpense ? "Expense Categories" : "Income Categories")
                                                        .Children(m => m.Subcategories)
                                                        .HtmlAttributes(new { id = "tree" })
                                                        .ChildrenHtmlAttributes(new { @class = "subItem" })
                                                        .ItemText(m => m.CategoryName)
                                                        .ItemTemplate(
                                                                @<text>
                                                                    <div class="category-links">
                                                                        <div class="category-link">
                                                                            <a class="@(item.ParentCategoryId==null?"parent-category":"child-category")" href="@item.CategoryName" desc="@item.CategoryName" data-category-id=@item.Id> @item.CategoryName</a>
                                                                        </div>
                                                                        <div class="category-editlink ">
                                                                            @Html.ActionLink("Edit", "Edit", "SubCategories", new {id = item.Id}, null) |
                                                                            @Html.ActionLink("Details", "Details", "SubCategories", new {id = item.Id}) |
                                                                            @Html.ActionLink("Delete", "Delete", "SubCategories", new {id = item.Id})
                                                                        </div>
                                                                    </div>


                                                                </text> )
                    )
                </div>
            </div>
            <div class="buttons">
                <button class="btn btn-default">@Html.ActionLink("Create new Category", financialOp.IsExpense ? "CreateExpenseCategory" : "CreateIncomeCategory", "Categories")</button>
                <button class="btn btn-default">@Html.ActionLink("Create new Subcategory", financialOp.IsExpense ? "CreateExpenseSubCategory" : "CreateIncomeSubCategory", "Subcategories")</button>

            </div>

        </div>
    }

</div>
<h3>
    @if (financialOp.IsExpense)
    {
        @Html.DisplayName("List of Expenses")
    }
    @if (financialOp.IsIncome)
    {
        @Html.DisplayName("List of Incomes")
    }
    @if (financialOp.IsTransfer)
    {
        @Html.DisplayName("List of Transfers")
    }
</h3>


<table class="table">
    <tr>
        <th>
            @if (financialOp.IsExpense)
            {
                @Html.DisplayName("Source Account")
            }
            @if (financialOp.IsIncome)
            {
                @Html.DisplayName("Target Account")
            }
            @if (financialOp.IsTransfer)
            {
                @Html.DisplayName("Source Account")
            }
        </th>

        <th>
            @Html.DisplayName("Amount")
        </th>

        @if (financialOp.IsExpense)
        {
            <th>
                @Html.DisplayName("Expense Category")
            </th>
        }
        @if (financialOp.IsIncome)
        {
            <th>
                @Html.DisplayName("Income Category")
            </th>
        }

        <th>
            @if (financialOp.IsExpense)
            {
                @Html.DisplayName("Expense SubCategory")
            }
            @if (financialOp.IsIncome)
            {
                @Html.DisplayName("Income SubCategory")
            }
            @if (financialOp.IsTransfer)
            {
                @Html.DisplayName("Target Account")
            }

        </th>

        <th>
            @Html.DisplayNameFor(model => financialOp.DateTime)
        </th>
        <th>
            @Html.DisplayNameFor(model => financialOp.Note)
        </th>

        <th></th>
    </tr>

    @foreach (var item in Model.ListOfFinancialOperations)
    {
        <tr>
            @if (financialOp.IsIncome)
            {

                <td>
                    @Html.DisplayFor(modelItem => item.DestinationOfMoney)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.AmountOfMoney)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SubCategory.ParentCategory.CategoryName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SourceOfMoney)
                </td>
            }
            else
            {
                <td>
                    @Html.DisplayFor(modelItem => item.SourceOfMoney)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.AmountOfMoney)
                </td>
                if (item.IsExpense)
                {
                    <td>
                        @Html.DisplayFor(modelItem => item.SubCategory.ParentCategory.CategoryName)
                    </td>
                }

                <td>
                    @Html.DisplayFor(modelItem => item.DestinationOfMoney)
                </td>
            }

            <td>
                @item.DateTime.ToString("dd/MM/yyyy")
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Note)
            </td>

            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.Id })
            </td>
        </tr>
    }

</table>

@section scripts
{
    <script src="~/Scripts/jsTree3/jstree.min.js"></script>
    <script>

        $(function () {
            var selectedData;
            $('#jstree').jstree({
                "core": {
                    "multiple": true,
                    "check_callback": false,
                    'themes': {
                        "responsive": true,
                        'variant': 'larg',
                        'stripes': false,
                        'dots': false
                    }
                },
                "types": {
                    "default": {
                        "icon": "fa fa-folder icon-state-warning icon-lg"
                    },
                    "file": {
                        "icon": "fa fa-file icon-state-warning icon-lg"
                    }
                },
                "plugins": ["state", "types", "sort"]
            });
        });
    </script>

    <script>
        $(document).ready(function () {

            $(".jstree-last").click(function (e) {
              //  debugger;
                var link = $(e.target);
              //  if(link.$items.)
                var categoryHolder = $(".subcategory-holder");
                categoryHolder.val(link.attr("data-category-id"))
            });
        });
    </script>
}

