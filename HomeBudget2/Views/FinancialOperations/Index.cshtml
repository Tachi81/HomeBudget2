@using HomeBudget2.Models
@model HomeBudget2.ViewModels.FinancialOperationViewModel
@using System.Web.UI.WebControls


<link href="~/Content/jsTree/themes/default/style.min.css" rel="stylesheet" />

@{
    FinancialOperation financialOperation = Model.FinancialOperation;
}

@if (financialOperation.IsExpense)
{
    <h2>Expenses</h2>
}
@if (financialOperation.IsIncome)
{
    <h2>Incomes</h2>

}
@if (financialOperation.IsTransfer)
{
    <h2>Transfers</h2>
}
    <hr />
    <div class="category-container">
        
        <div class="category-inside category-inside1">
            @using (Html.BeginForm("Create", "FinancialOperations", FormMethod.Post))
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.FinancialOperation.IsExpense)
                    @Html.HiddenFor(model => model.FinancialOperation.IsIncome)
                    @Html.HiddenFor(model => model.FinancialOperation.IsTransfer)

                    <div class="form-group  label-category">
                        @Html.LabelFor(model => model.FinancialOperation.AmountOfMoney, "Amount of Money", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.FinancialOperation.AmountOfMoney, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.FinancialOperation.AmountOfMoney, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @if (financialOperation.IsExpense || financialOperation.IsTransfer)
                    {
                        <div class="form-group label-category">
                            @Html.LabelFor(model => model.FinancialOperation.BankAccountId, "From account", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.FinancialOperation.BankAccountId, Model.SelectListOfBankAccounts, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.FinancialOperation.BankAccountId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }


                    @if (financialOperation.IsExpense || financialOperation.IsIncome)
                    {
                        <div class="form-group label-category">
                            @if (financialOperation.IsExpense)
                            {
                                @Html.LabelFor(model => model.FinancialOperation.SubCategoryId, "Expense SubCategory", htmlAttributes: new { @class = "control-label col-md-2" })
                            }
                            else
                            {
                                @Html.LabelFor(model => model.FinancialOperation.SubCategoryId, "Income SubCategory", htmlAttributes: new { @class = "control-label col-md-2" })
                            }

                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.FinancialOperation.SubCategoryId, Model.SelectListOfSubCategories, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.FinancialOperation.SubCategoryId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }

                    @if (financialOperation.IsIncome || financialOperation.IsTransfer)
                    {
                        <div class="form-group label-category">
                            @Html.LabelFor(model => model.FinancialOperation.TargetBankAccountId, "Target account", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.FinancialOperation.TargetBankAccountId, Model.SelectListOfBankAccounts, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.FinancialOperation.TargetBankAccountId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }

                    <div class="form-group label-category">
                        @Html.LabelFor(model => model.FinancialOperation.DateTime, "Date", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.FinancialOperation.DateTime, new { htmlAttributes = new { @class = "form-control datepicker ", @Value = @DateTime.Now.ToShortDateString() } })
                            @Html.ValidationMessageFor(model => model.FinancialOperation.DateTime, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group label-category">
                        @Html.LabelFor(model => model.FinancialOperation.Note, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.FinancialOperation.Note, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.FinancialOperation.Note, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group label-category">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Create" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            }
        </div>
        
        <div class="category-inside category-inside2">
            <div class="form-body">
                <div id="jstree">
                    <h2>TreeView</h2>
                    @(Html.TreeView(Model.ListOfCategories)
                                                                                              .EmptyContent("Expense Categories")
                                                                                              .Children(m => m.Subcategories)
                                                                                              .HtmlAttributes(new { id = "tree" })
                                                                                          .ChildrenHtmlAttributes(new { @class = "subItem" })
                                                                                              .ItemText(m => m.CategoryName)
                                                                                              .ItemTemplate(
                                                                            @<text>
                                                                                <a href="@item.CategoryName" desc="@item.CategoryName">@item.CategoryName</a>
                                                                            </text>)
                    )
                </div>
            </div>
        </div>
    </div>
<h3>
    @if (financialOperation.IsExpense)
    {
        @Html.DisplayName("List of Expenses")
    }
    @if (financialOperation.IsIncome)
    {
        @Html.DisplayName("List of Incomes")
    }
    @if (financialOperation.IsTransfer)
    {
        @Html.DisplayName("List of Transfers")
    }
</h3>


<table class="table">
    <tr>
        <th>
            @if (financialOperation.IsExpense)
            {
                @Html.DisplayName("Source Account")
            }
            @if (financialOperation.IsIncome)
            {
                @Html.DisplayName("Target Account")
            }
            @if (financialOperation.IsTransfer)
            {
                @Html.DisplayName("Source Account")
            }
        </th>

        <th>
            @Html.DisplayName("Amount")
        </th>

        @if (financialOperation.IsExpense)
        {
            <th>
                @Html.DisplayName("Expense Category")
            </th>
        }
        @if (financialOperation.IsIncome)
        {
            <th>
                @Html.DisplayName("Income Category")
            </th>
        }

        <th>
            @if (financialOperation.IsExpense)
            {
                @Html.DisplayName("Expense SubCategory")
            }
            @if (financialOperation.IsIncome)
            {
                @Html.DisplayName("Income SubCategory")
            }
            @if (financialOperation.IsTransfer)
            {
                @Html.DisplayName("Target Account")
            }

        </th>

        <th>
            @Html.DisplayNameFor(model => model.FinancialOperation.DateTime)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FinancialOperation.Note)
        </th>

        <th></th>
    </tr>

    @foreach (var item in Model.ListOfFinancialOperations)
    {
        <tr>
            @if (financialOperation.IsIncome)
            {

                <td>
                    @Html.DisplayFor(modelItem => item.DestinationOfMoney)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.AmountOfMoney)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SubCategory.ParentCategory.CategoryName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SourceOfMoney)
                </td>
            }
            else
            {
                <td>
                    @Html.DisplayFor(modelItem => item.SourceOfMoney)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.AmountOfMoney)
                </td>
                if (item.IsExpense)
                {
                    <td>
                        @Html.DisplayFor(modelItem => item.SubCategory.ParentCategory.CategoryName)
                    </td>
                }

                <td>
                    @Html.DisplayFor(modelItem => item.DestinationOfMoney)
                </td>
            }

            <td>
                @item.DateTime.ToString("dd/MM/yyyy")
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Note)
            </td>

            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.Id })
            </td>
        </tr>
    }

</table>

@section scripts
{
    <script src="~/Scripts/jsTree3/jstree.min.js"></script>
    <script>

        $(function () {
            var selectedData;
            $('#jstree').jstree({
                "core": {
                    "multiple": true,
                    "check_callback": false,
                    'themes': {
                        "responsive": true,
                        'variant': 'larg',
                        'stripes': false,
                        'dots': false
                    }
                },
                "types": {
                    "default": {
                        "icon": "fa fa-folder icon-state-warning icon-lg"
                    },
                    "file": {
                        "icon": "fa fa-file icon-state-warning icon-lg"
                    }
                },
                "plugins": ["dnd", "state", "types", "sort"]
            });
        });
    </script>
}

